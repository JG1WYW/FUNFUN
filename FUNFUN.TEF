
{\center
    常駐関数電卓 ふぁんふぁん V.3.141 Copyright (C) 1993, 1994 by tar.
}


□ 用途


　ソフトや文書を書いているとき,
デバッガでコードを追っかけているときなどに,
電卓,
とくに16進 <=> 10進 <=> 2進変換などが
できる電卓が欲しくなることがしばしばあります.
MSDOSはシングルタスクですから,
高級な電卓プログラムがあっても
ワンショットで起動させるようなことはできませんし,
やっと常駐ソフトを見つけても,
文字どおり「電卓」機能しか持っていないことが多いため,
おもむろに関数電卓を取り出して
(しばしばそれを探すために無駄な時間を浪費してしまう...),
むなしくピコピコ使うことになります.


　このふぁんふぁんは,
そんな忙しいMSDOSユーザーに贈る常駐関数電卓です.


　... ところが,
このソフトはバカみたいにメモリを食います.
50Kくらいでしょうか.
でも最近のDOSはメモリも多くなった(?)ので,
太っ腹にいきませう.


□ 対応機種


{\depth(4) MSDOS PC98 シリーズ (開発機種: PC286VS)}


□ 起動方法


　まずコマンドラインから常駐させます:


{\depth(4) \%  funfun}


　これで常駐完了です.


　さて,
電卓を呼び出すにはCOPYキーを押します.
COPYキーを押すと画面上半分,
あるいは下半分にふぁんふぁんのウィンドウが開き,
そこで計算が出来るようになります.


　とりあえず終り方を言うと,
ウィンドウを閉じるにはESCキーを押します.
常駐を解除するにはオプション-rを加えて:


{\depth(4) \%  funfun -r}


　これで常駐解除です.


□ 使い方・その１: 演算のきまり


　ふぁんふぁんのプロンプト \%
の後に計算したい式を一行代入して,
最後にリターンキーを押します.
一行の長さは最大 72 文字です.
さらに長い式を計算する場合は後述の変数代入/参照機能を利用してください.


{\depth(4)
    {・四則演算:
		
        +, -, *, /
	}
	
	
    {・論理演算:
        
		|, &. 浮動小数点数を切り捨てて, 32bit の論理和, 論理積.
	}
	
	
    {・括弧
		
        (, )
	}
	
	
    {・べき
		
        A ^ B で, A の B 乗を得ます.
		展開公式を用いて演算しますので,
		単なる2乗などを計算しても誤差が出る場合があります.
		でも逆にAの1.3乗とか0.2乗などが計算できます.
	}
	
	
    {・変数代入/参照
		
		最大3文字の変数(Case sensitive)を全部で16個記憶できます.
		変数の宣言は要りません.
		代入は<式> = <変数> のように,
		変数を後に書きます.
        変数ansには直前の計算結果が格納されています.
		あらかじめpiとeが定義されています.
	}
	
	
    {・関数
		
        各種初等関数が計算できます. 列挙すると:
		
		{\depth(8)\raw
			sin, cos, tan:      三角関数
            
			asin, acos, atan:   逆関数
            
			sinh, cosh, tanh:   双曲線関数
            
			exp, ln, log:       指数, 自然対数, 常用対数
			
			
            sqrt:               平方根
            
			hex, bin:           32bit の 16 進変換, 2 進変換
            
			abs:                絶対値
            
			cn:                 指数表示
            
			dms:                度:分:秒 表示
		}
	}
}


{
例)\depth(4)\raw\%
( -pi + 3 ) / ( e - 2 ) * 1.2     ; 変数の参照

	... (答)

	\%  ans * 3.4 = b                   ; 変数への代入.

	... (答)
}


□ 使い方・その２: 数の記法


　数値は総て IEEE 倍精度浮動小数点数として扱いますが, 記法には次の 4 通りが
あります.


{\depth(4)\raw
	1. 整数       10, 100, 1000
	
	2. 少数       1.2, 3.45, 6.789
	
	3. 整数e指数  3e141 (3 掛ける 10 の 141 乗), -6e3
	
	4. 少数e指数  1.6e10, 3.45e-5
	
	5. 基数_整数  16_ffe0, 2_01001010, 8_7472
	
	6. 度:分:秒   57:29:57 (57 度 29 分 57 秒)
}


　指数の底は 10 です. (例) 1.6e3 = 1600.


　基数_整数表現を用いると, 32 bit の 16 進数や 2 進数, あるいは 8 進数などが
表せます. この場合整数を符号無し数として扱いますが, 関数 hex, bin は引数に符号
を許します. 負の数は 2 の補数表現です.


　IEEE 倍精度は 10 進で 15 桁の精度を持ちますが, 16 桁目に必ず誤差を含むため,
その 1000 倍の誤差まで許すように 10 進で 12 桁までしか表示しません.


　1.0e6 以上と 1.0e-6 未満の数は「仮数 E 指数」の形式で表示され, それ以外は
固定小数点表示です. その場合でも関数 cn を用いると, 指数表示ができます.


　「度:分:秒」形式で入力した数は, 「秒」に換算されます. 「度」ではありません!!
度は省略でき, その場合, 入力した文字列は「分:秒」と解釈されます. 秒に換算され
た数は関数 dms で「度:分:秒」に変換できます.


　この「度:分:秒」の取り扱いは, ラジアン・度の変換を意図したものではなく,
むしろコンパクトディスクの時間編集など, 「秒」の加減算を意図したものです.


□ 使い方・その３: キー割り当て


　キー割当は Emacs ライクです.


{\depth(8)\raw
		C-a     カーソルを行頭へ
        
		C-e     カーソルを行末へ
        
		C-b     カーソルを一文字左へ
        
		C-f     カーソルを一文字右へ
        
		C-p     ヒストリを一つ前へ
        
		C-n     ヒストリを一つ後へ
        
		C-h     バックスペース
        
		C-d     カーソル位置の文字を削除
        
		C-k     カーソル位置から行末まで削除
        
		C-g     キーアボート (ESC, C-c)
}


　ヒストリは５つ保存しています.


□ 使い方・その４: その他


　入力文字列の１文字目が次の場合, 各種の処理を行います.


{\depth(8)
		'?'     変数の内容を表示します.
        
		'#'     変数の内容をクリアします.
        
		'@'     低位の (00h〜1fh) アスキーコード表を表示します.
        
		'!'     高位の (20h〜7fh) アスキーコード表を表示します.
        
		'>'     ふぁんふぁん のウィンドウを画面下半分に移動します.
        
		'<'     ふぁんふぁん のウィンドウを画面上半分に移動します.
}


□ 文法


　文法は以下の通り定義されています.


{\depth(4)
	Stmts = Expr [ "=" Ident ].
	
	Expr = E1 { Addop E1 }.
	
	E1 = E2 { Mulop E2 }.
	
	E2 = E3 [ "^" E3 ].
	
	E3 = [ "+" | "-" ] E4.
	
	E4 = Number | Ident | Functor "(" Expr ")" | "(" Expr ")".
	
	Addop = "+" | "-" | "|"
	
	Mulop = "*" | "/" | "&"
	
	Ident = Letter { Letter | Digit }.
	
	Letter = "A" | "B" | .. | "Z" | "a" | "b" | ... | "z".
	
	Number = Digit { Digit } [ Exponent ]
	
	{\depth(11)
		| Digit { Digit } ":" Digit { Digit } [ ":" Digit { Digit } ]
		
		| Digit { Digit } "_" HexDigit { HexDigit }
		
		| Digit { Digit } "." Digit { Digit } [ Exponent ].
	}
	
	Exponent = ( "E" | "e" ) [ "+" | "-" ] Digit { Digit }.
	
	HexDigit = Digit | "A" | "B" | "C" | "D" | "E" | "F"
	
	{\depth(21)
		| "a" | "b" | "c" | "d" | "e" | "f"
	}
	
	Digit = "0" | "1" | ... | "9"
	
	
    Functor:
	
	{\depth(8)\raw
		sin     cos     tan     asin    acos    atan
		
		sinh    cosh    tanh    exp     ln      log
		
		sqrt    hex     bin     abs     cn      dms
	}
}


□ フックする割り込み


　ふぁんふぁん は起動に 28h, 常駐確認に 1ah をフックします. また, トリガーに
05h を占有します. 05h をフックしないのは, 恐らくコピーキーにはハードコピーなど
の別のレジデントユーティリティが設定されているはずなので, これをフックしてしま
うと, ふぁんふぁんを呼び出す度にプリンタが動き出す可能性があるからです. これが
どうしても不都合な場合, 常駐させる順序を逆にして問題解決してください.


　起動中には int 18h を発行してキーボード回りの処理を行い, 表示は VRAM に直接
書き込むようにしています. とりあえず私の環境では不都合はありませんが, もし相性
が悪いソフトがあればお知らせください. 改善します.


　大きな常駐ソフトなので, 不要になったら外しておきましょう.


□ 著作権


　常駐関数電卓 ふぁんふぁん の著作権は私が全権保留中です. ただしバイナリ
の使用権はフリーに認めます. 個人的使用を除き, ソースの使用権は私に連絡が
ない限り認めません. 


{\right
	E-mail: narita@mt.cs.keio.ac.jp
}

